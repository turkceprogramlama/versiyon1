/*
* Can recognize languages like this:
  
yordam topla(a,b)
{
   //x = y + z
   dön karekök(a * a + b * b)
}

yordam çıkar(a,b)
{
   dön a * a - b * b
}

topla(3, 4)
çıkar(4,3)

karekök(a) + karekök(a)

2 - ( 3 + 4 - (1 + 1))

*/

{

	function evaluate(func_name, tree){
    
    	if(tree.type == 'variable')
            	return func_name + '__' + tree.text;
			else if(tree.type == 'math_func')
            {
				if(tree.exp.type == 'variable')
                	return tree.func +'('+ func_name + '__' + tree.exp.text + ')';    
				else
            		return tree.func +'('+ evaluate(func_name, tree.exp) + ')';    
            }
	        else if(tree.type == 'operator')
       			return ' ' + tree.text + ' ';
            else
                return '(' + renameVariables(func_name, tree) + ')'
    
    }

	function renameVariables(func_name, tree){
    
    	var str = ''

		if(!Array.isArray(tree))
			str += evaluate(func_name, tree)
		else
			for(var i=0; i < tree.length; i++) 
    	      	str += evaluate(func_name, tree[i])

        return str;    	
    }
}

start = statementList

statementList = statement*

statement 
 = functionDefinition
 / functionCall
 / b:block_item { 
 //console.log(b);
 return b;}


functionDefinition
 = 'yordam' _ n:name _ t:nameTuple _ nl
 _'{' _ [ \n]* _ 
    _ b:block_item_list 
    _ r:(don)?
 _ '}' _ nl
{ 
    console.log(n + '(' + t + ') function declaration')

	for(var i=0; i < b.length; i++) // make the returned thing flat, accumulate on first
    	console.log(b[i]); 
   
    var obj = {'type':'functionDefinition', 'name': n, 'items': b, 'args': t, 'return': renameVariables(n, r), 'tree': r};
    window['function_'+ n] = obj;
	return obj;
} 

don 
 = _ 'dön' _ exp: expression_statement{ return exp; }



functionCall
 = n:name _ t:numberTuple _ nl
 {
    var str = n + '(' 
      
	if(t[0] != undefined) str += t[0].text
      
	for(var i=1; i < t.length; i++)		
		str += ',' + t[i].text;
    
    var def = eval('function_'+ n);
	console.log(def);
	console.log(t);

	for(var i=0; i < def.args.length; i++)		
    {
    	console.log('var ' + n + '__' + def.args[i] + ' = ' + t[i].text);
    	window.eval('var ' + n + '__' + def.args[i] + ' = ' + t[i].text);
    }
    
    console.log(eval(def.return))
    
    
    
    var obj = {'type':'functionCall', 'name': n, 'args': t, 'text': str+')'};
	return obj;   // 'str': text() de olabilir
 }
 
 
 
/*
*      				Name and Number Tuples (a,b,c), (1,2,3)
*/
 
nameTuple
 = '(' _  list: name_list _ ')'
 {
  	var first = Array(list[0]);
    var second = list[1];

	for(var i=0; i < second.length; i++) // make the returned thing flat, accumulate on first
    	first.push(second[i][2]);
        
     return first;   
 } 

numberTuple
 = '(' _  list: number_list _ ')'
 {
 	var first = list[0];
    var second = list[1];

	for(var i=0; i < second.length; i++) // make the returned thing flat, accumulate on first
    	first.push(second[i][2]);
        
     return first;   
 }





/*
*      				Block Item List
*/

compound_statement
 = nl _'{' _ [ \n]* _ b:block_item_list _ '}' _ nl _{  // block itemlar yerine bos da olabilir
    return b; 
 }

block_item_list = block_item* 

block_item
 =  (!don) exp:expression_statement{ 
 	if(exp.type == 'expression')
    	return exp;
    else
 		return {'type': 'expression', 'tree': exp}
 }
 / math_functions
 / comment


/*
*      				Expression 
*/

expression_statement "çarpılan"
 = head:Term tail:(_ ("+" / "-") _ Term)* [\n]* _
{  	    
    if(head && tail == null){ 
   		if(head[0].length > 0)  // here is the expression with paranthesis
    		return {'type': 'expression', 'tree': head[0]};    	
	    else
	    	return {'type': head[0].type, 'text':head[0].text};    
    }
    else if(head && tail.length == 0) 
    { 
        return head; 
	}  
    else if(head && tail.length >= 1) 
    { 
        tail = tail[0];
    	var arr = Array(head);
        arr.push({'type': 'operator', 'text': tail[1]}) // add operator
		arr.push(tail[3]) 								// add the other operand
        return arr;
	} 
}

Term "çarpan"
  = head:Factor tail:(_ ("*" / "/" / "%") _ Factor)* 
  {
    if(head && ( tail == null || tail.length == 0))
    {
   		if(Array.isArray(head) && head[0].length > 0)  // here is the expression with paranthesis
    		return {'type': 'expression', 'tree': head[0]};    	
	    else
	    	return head;    
    }
    else if(head && tail) 
	{
        tail = tail[0];
    	var arr = Array(head);
        arr.push({'type': 'operator', 'text': tail[1]}) // add operator
		arr.push(tail[3]) 								// add the other operand
        return arr;
	} 
  }
  

Factor
  = math: math_functions { 
  	console.log(math);
    return math;
   }
  / "(" _ expr:expression_statement _ ")" { return expr; }
  / f:Float { return {'type': 'float', 'text': f.text}}
  / i:Integer { return {'type': 'integer', 'text': i.text}}
  / n:name {return {'type': 'variable', 'text': n}}


/*
*      				Math Functions
*/

function_combination
 = head:math_functions _ tail:('+' _ math_functions)*
 {
 	console.log(tail[0]);
    for(var i=0; i<tail.length; i++)
    	head.text += tail[i][0] + tail[i][2].text; 
    return head
 }

math_functions "matematik_fonksiyonlari"
 = taban / tavan / karekok / mutlakDeger

taban = 'taban' _ '(' _ exp:expression_statement _ ')'{
 	return {'type':'math_func', '#evaluation': 0, 'func': 'Math.floor', 'exp': exp, 'text': 'Math.floor(' + exp.text + ')', 'lineNumber': location().end.line, 'start':location().start.column, 'end':location().end.column-1}; 
}
tavan = 'tavan' _ '(' _ exp:expression_statement _ ')'{
 	return {'type':'math_func', '#evaluation': 0, 'func': 'Math.ceil', 'exp': exp, 'text': 'Math.ceil(' + exp.text + ')', 'lineNumber': location().end.line, 'start':location().start.column, 'end':location().end.column-1}; 
}
karekok = 'karekök' _ '(' _ exp:expression_statement _ ')'{
 	return {'type':'math_func', '#evaluation': 0, 'func': 'Math.sqrt', 'exp': exp, 'text': 'Math.sqrt(' + exp.text + ')', 'lineNumber': location().end.line, 'start':location().start.column, 'end':location().end.column-1}; 
}
mutlakDeger = 'mutlak' _ '(' _ exp:expression_statement _ ')'{
 	return {'type':'math_func', '#evaluation': 0, 'func': 'Math.abs', 'exp': exp, 'text': 'Math.abs(' + exp.text + ')', 'lineNumber': location().end.line, 'start':location().start.column, 'end':location().end.column-1}; 
}

/*
*      				Misc
*/
comment "comment"
   = _ "//" _ value:[ a-zA-Z0-9|\=|(|)|+|\-|\+|*|\._|ş|ğ|ç|ö|ü|ı|Ş|Ğ|Ç|Ö|Ü|I|Ü]* nl {return {type: 'comment', value: value.join("")}; }
  

/*
*      				Primitives
*/

name_list = name ( ',' _ name)*

number_list = (Float / Integer )* ( ',' _ (Float / Integer))*

name = l:Letter i:Integer {return l+i}
     / l:Letter {return l;} 

Letter "letter" 
  = [a-zA-Z|\_|ş|ğ|ç|ö|ü|ı|ü|Ş|Ğ|Ç|Ö|Ü|İ|Ü]+ {return text()} 

Integer "integer"
  = [0-9]+ { return {type: 'integer', text: text()}; }

Float "float" 
  = [0-9]* '.' [0-9]* { return {type: 'float', text: text()}; }

_ "whitespace"
  = [ \t\r]* {return null;} 
  
nl "newline"
  = [\n]* {return null;}
   