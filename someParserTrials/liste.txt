/*
* Can recognize languages like this:
  
  değişken akif = [1.1, 2, 3]
  akif[2]
  akif.uzunluk
  akif.ekle(4)

*/

start = statementList

statementList = statement*

statement 
 = createArray 
 / arrayAccess
 / function
 / property

createArray = list:arrayDefinition nl {
	return list
    
    array = []
    for(var i=0; i < list.length; i++)
		if(list[i].type == 'integer')
			array.push(parseInt(list[i].text))
        else    
	        array.push(parseFloat(list[i].text))
            
    return array;        
}

arrayAccess 
 = n:name '[' int:Integer ']' nl {
 	return window.eval(n + '['+ (parseInt(int.text)) + ']')
 }


arrayDefinition = 'değişken' _ n:name _ '=' _ '[' _ list: number_list _']' 
{
	var first = list[0];
    var second = list[1];

	for(var i=0; i < second.length; i++) // make the returned thing flat, accumulate on first
    	first.push(second[i][1]);
      
    // var a = [1,2,3]  (this will be created in str)
	var str = 'var ' +  n + ' = ['
      
	if(first[0] != undefined) str += first[0].text
      
	for(var i=1; i < first.length; i++)		
		str += ', ' + first[i].text;
           
	str = str + ']'
      
	console.log(str);
	window.eval(str);
     
	return {'name': n, 'content': first, 'array': eval(n)};
}

property
 = n:name '.' prop:name _ nl
 {
 	if(prop == 'uzunluk')
    	return eval(n +'.length')    
 }

function
 = n:name '.' func:name '(' arg:(name / Float / Integer) ')' _ nl
 {
  	if(func == 'ekle')
    	eval(n + '.push('+ arg.text +')')
    else if(func == 'çıkar')
    	eval(n + '.pop()')
    else if(func == 'birleştir')
        eval(n + '.pop()')
        
    return eval(n)    
 }

number_list = (Float / Integer )* ( ',' (Float / Integer))*

name = l:letter i:Integer {return l+i}
     / l:letter {return l;} 

letter "letter" 
  = [a-zA-Z_|ş|ğ|ç|ö|ü|ı|ü]+ {return text()} 

Integer "integer"
  = _ [0-9]+ { return {type: 'integer', text: text()}; }

Float "float" 
  = _ [0-9]* '.' [0-9]* { return {type: 'float', text: text()}; }

_ "whitespace"
  = [ \t\r]* {return null;} 
  
nl "newline"
  = [\n]* {return null;}
   